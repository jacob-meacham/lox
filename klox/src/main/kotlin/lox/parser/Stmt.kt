package lox.parser

import lox.Environment

// Generated by generate_ast ast 2024-01-20 22:27:33

interface Stmt { 
    fun<R> accept(visitor: StmtVisitor<R>, environment: Environment): R
}

interface StmtVisitor<R> {
    fun visitBreak(stmt: Break, environment: Environment): R
	fun visitContinue(stmt: Continue, environment: Environment): R
	fun visitExpressionStatement(stmt: ExpressionStatement, environment: Environment): R
	fun visitForStatement(stmt: ForStatement, environment: Environment): R
	fun visitVarStatement(stmt: VarStatement, environment: Environment): R
}

class Break() : Stmt {
    override fun<R> accept(visitor: StmtVisitor<R>, environment: Environment): R {
        return visitor.visitBreak(this, environment)
    }
}

class Continue() : Stmt {
    override fun<R> accept(visitor: StmtVisitor<R>, environment: Environment): R {
        return visitor.visitContinue(this, environment)
    }
}

class ExpressionStatement(val expression: Expr) : Stmt {
    override fun<R> accept(visitor: StmtVisitor<R>, environment: Environment): R {
        return visitor.visitExpressionStatement(this, environment)
    }
}

class ForStatement(val loopVariable: Token, val loopOver: Expr, val block: Expr) : Stmt {
    override fun<R> accept(visitor: StmtVisitor<R>, environment: Environment): R {
        return visitor.visitForStatement(this, environment)
    }
}

class VarStatement(val name: Token, val initializer: Expr?) : Stmt {
    override fun<R> accept(visitor: StmtVisitor<R>, environment: Environment): R {
        return visitor.visitVarStatement(this, environment)
    }
}
