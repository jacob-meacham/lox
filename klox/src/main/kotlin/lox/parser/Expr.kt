package lox

// Generated by generate_ast ast 2024-01-20 17:41:56

interface Expr { 
    fun<R> accept(visitor: ExprVisitor<R>): R
}

interface ExprVisitor<R> {
    fun visitBinary(expr: Binary): R
	fun visitCall(expr: Call): R
	fun visitGrouping(expr: Grouping): R
	fun visitBlock(expr: Block): R
	fun visitLiteral(expr: Literal): R
	fun visitUnary(expr: Unary): R
	fun visitVariable(expr: Variable): R
	fun visitSubscription(expr: Subscription): R
	fun visitSlice(expr: Slice): R
}

class Binary(val left: Expr, val operator: Token, val right: Expr) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitBinary(this)
    }
}

class Call(val callee: Expr, val paren: Token, val arguments: List<Expr>) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitCall(this)
    }
}

class Grouping(val expression: Expr) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitGrouping(this)
    }
}

class Block(val statements: List<Stmt>) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitBlock(this)
    }
}

class Literal(val value: Any?) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitLiteral(this)
    }
}

class Unary(val operator: Token, val right: Expr) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitUnary(this)
    }
}

class Variable(val name: Token) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitVariable(this)
    }
}

class Subscription(val left: Expr, val index: Expr) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitSubscription(this)
    }
}

class Slice(val left: Expr, val start: Expr, val end: Expr) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitSlice(this)
    }
}
