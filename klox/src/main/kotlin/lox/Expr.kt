package lox

// Generated by generate_ast ast 2024-01-15 22:28:35

interface Expr { 
    fun<R> accept(visitor: ExprVisitor<R>): R
}  

interface ExprVisitor<R> {
    fun visitBinary(expr: Binary): R
	fun visitGrouping(expr: Grouping): R
	fun visitLiteral(expr: Literal): R
	fun visitUnary(expr: Unary): R
}

class Binary(val left: Expr, val operator: Token, val right: Expr) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitBinary(this)
    }
}

class Grouping(val expression: Expr) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitGrouping(this)
    }
}

class Literal(val value: Any?) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitLiteral(this)
    }
}

class Unary(val operator: Token, val right: Expr) : Expr {
    override fun<R> accept(visitor: ExprVisitor<R>): R {
        return visitor.visitUnary(this)
    }
}
