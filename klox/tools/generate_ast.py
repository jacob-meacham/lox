import argparse
import sys
from datetime import datetime
from typing import IO


def build_preamble(package: str) -> str:
    return f"""package {package}

// Generated by generate_ast ast {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

interface Expr {{ 
    fun<R> accept(visitor: ExprVisitor<R>): R
}}  
"""

def build_type(name: str, fields: [str]) -> str:
    constructor = ', '.join([f'val {field.split(" ")[1].strip()}: {field.split(" ")[0].strip()}' for field in fields])
    return f"""
class {name}({constructor}) : Expr {{
    override fun<R> accept(visitor: ExprVisitor<R>): R {{
        return visitor.visit{name}(this)
    }}
}}
"""


def build_visitor(exprs: (str, str)) -> str:
    visitor_methods = '\n\t'.join([f"fun visit{name}(expr: {name}): R" for name, _ in exprs])

    return f"""
interface ExprVisitor<R> {{
    {visitor_methods}
}}
"""


def main(grammar: IO, outfile: IO):
    out = build_preamble("lox")
    exprs = []
    for expr in grammar.readlines():
        name, fields = expr.strip().split(':')
        fields = [f.strip() for f in fields.split(',')]
        name = name.strip()

        exprs.append((name, fields))

    out += build_visitor(exprs)
    for name, fields in exprs:
        out += build_type(name, fields)

    outfile.write(out)


def parse_options():
    parser = argparse.ArgumentParser()
    parser.add_argument('grammar', type=argparse.FileType('r'))
    parser.add_argument('outfile', type=argparse.FileType('w'))
    return parser.parse_args()


if __name__ == '__main__':
    options = parse_options()

    main(options.grammar, options.outfile)

    sys.exit(0)
