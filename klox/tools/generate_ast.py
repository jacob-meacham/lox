import argparse
import sys
from datetime import datetime
from pathlib import Path
from typing import IO


def build_preamble(package: str, type: str) -> str:
    return f"""package {package}

// Generated by generate_ast ast {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

interface {type} {{ 
    fun<R> accept(visitor: {type}Visitor<R>): R
}}
"""

def build_type(name: str, type: str, fields: [str]) -> str:
    constructor = ', '.join([f'val {field.split(" ")[1].strip()}: {field.split(" ")[0].strip()}' for field in fields])
    return f"""
class {name}({constructor}) : {type} {{
    override fun<R> accept(visitor: {type}Visitor<R>): R {{
        return visitor.visit{name}(this)
    }}
}}
"""


def build_visitor(items: (str, str), type: str) -> str:
    visitor_methods = '\n\t'.join([f"fun visit{name}({type.lower()}: {name}): R" for name, _ in items])

    return f"""
interface {type}Visitor<R> {{
    {visitor_methods}
}}
"""

def split_sections(lst: list):
    section = []
    typ = None
    for item in lst:
        if ' ->' in item:
            if typ:
                yield typ, section
                section = []
            typ = item.split(' ->')[0]
        else:
            section.append(item)
    if typ:
        yield typ, section


def main(grammar: IO, outdir: str):
    path = Path(outdir)
    sections = split_sections([l for l in grammar.readlines() if l != '\n'])
    for typ, section in sections:
        out = build_preamble("lox.parser", typ)
        items = []
        for g in section:
            name, fields = g.strip().split(':')
            fields = [f.strip() for f in fields.split(',')]
            name = name.strip()

            items.append((name, fields))

        out += build_visitor(items, typ)
        for name, fields in items:
            out += build_type(name, typ, fields)

        with open(path / f'{typ}.kt', 'w') as f:
            f.write(out)


def parse_options():
    parser = argparse.ArgumentParser()
    parser.add_argument('grammar', type=argparse.FileType('r'))
    parser.add_argument('outdir')
    return parser.parse_args()


if __name__ == '__main__':
    options = parse_options()

    main(options.grammar, options.outdir)

    sys.exit(0)
