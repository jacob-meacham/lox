// This is a line comment
/* This is a block comment */

//for(a in 0..10) {
//    print(a)
//    //continue;
//    print(a+10)
//};;;

//?>
//for fun

print([1,2,3][0])
print([1,2,3][0:2])
print([1,2,3][:2])
print([1,2,3][1:])

print((1..2) + (2..4))
print("test 1 " + " and test 2")
print("this is now a string" + 3)

var a = nil
a?.let {
    print("Should not see this: ", a)
}

var testArray = 1..10
print(testArray?.filter { it > 5; })
print(testArray.fold(fun(acc, n) {
    acc + n
}, 0))

//var a = 1
//a = 2
//print(a)

1.let {
    print("Let on: ", it)
}

//a.let {
//    print("Let on a: ", it)
//}

// TODO: This breaks without the semicolon, due to parsing errors
//print([1,2,3].map { it * 2 })
print([1,2,3]?.map { it * 2; })


print([2,4,6].map(fun(it) {
    it * 2;
}))

fun myTestFunction(foo) {
    print("This is foo: ", foo)
    return 20
}

fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print("counter: ", i);
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".


var testAnon = fun (a, b) {
    print("a + b: ", a+b)
}(4, 5)

print(myTestFunction("bar"))

var test = {
var l = 15
var j = 20
l + j
}

print(test)

var test2 = {
var k = 1
var m = 2
}

print(test2)

var a = 10
var b = 20
var c = (a + b) * 10
print(c)

var testWhen1 = when {
a == 10 -> 20
}

(when (b) {
    10 -> {
        print
    }
    else -> print
})("foo bar!");

{
    print("a starts as: ", a)
    var a = 20
    print("a is: ", a)
    print("in a block!"); print("on the same line!")
    {
        print("in a block in a block!")
    }
}

print("as is now: ", a)

var testWhen2 = when(b) {
    10 -> "a"
    10 + 20 -> "b"
    21 -> "d"
    else -> "c"
}

print(testWhen1, " ", testWhen2)

print((a + b), " and then ", 10);
print([1,2,3], 4)
